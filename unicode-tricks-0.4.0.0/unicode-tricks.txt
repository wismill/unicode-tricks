-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Functions to work with unicode blocks more convenient.
--   
--   A package that makes rendering of frames, blocks, subscript and
--   superscript more convenient.
@package unicode-tricks
@version 0.4.0.0


-- | Unicode has 2-by-2 blocks, this module aims to make it more convenient
--   to render such blocks.
module Data.Char.Block

-- | A data type that determines the state of the <i>row</i> in a block. it
--   determines the left and the right part of the row of the block.
data Row a
Row :: a -> a -> Row a

-- | The left part of a row of the block.
[left] :: Row a -> a

-- | The right part of the row of the block.
[right] :: Row a -> a

-- | A data type that determines the state of the four subparts of the
--   block.
data Block a
Block :: Row a -> Row a -> Block a

-- | The upper part of the block.
[upper] :: Block a -> Row a

-- | The lower part of the block.
[lower] :: Block a -> Row a

-- | Convert the given <a>Block</a> value to a block character in unicode.
--   <a>True</a> means that part is filled, and <a>False</a> means the part
--   is not filled.
filled :: Block Bool -> Char
instance Data.Traversable.Traversable Data.Char.Block.Block
instance GHC.Show.Show a => GHC.Show.Show (Data.Char.Block.Block a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Char.Block.Block a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Char.Block.Block a)
instance GHC.Base.Functor Data.Char.Block.Block
instance Data.Foldable.Foldable Data.Char.Block.Block
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Char.Block.Block a)
instance Data.Traversable.Traversable Data.Char.Block.Row
instance GHC.Show.Show a => GHC.Show.Show (Data.Char.Block.Row a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Char.Block.Row a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Char.Block.Row a)
instance GHC.Base.Functor Data.Char.Block.Row
instance Data.Foldable.Foldable Data.Char.Block.Row
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Char.Block.Row a)
instance GHC.Base.Applicative Data.Char.Block.Block
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Char.Block.Block a)
instance GHC.Base.Applicative Data.Char.Block.Row
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Char.Block.Row a)


-- | Unicode has a Braille segment for Braille with six dot cells, and a
--   segment for Braille with eight dot cells, this module aims to make it
--   more convenient to render such characters.
module Data.Char.Braille

-- | A datastructure to render Braille patterns with six dots cells.
data Braille6 a
Braille6 :: Row a -> Row a -> Row a -> Braille6 a

-- | The state of the top row of the Braille character.
[top] :: Braille6 a -> Row a

-- | The state of the middle row of the Braille character.
[middle] :: Braille6 a -> Row a

-- | The state of the bottom row of the Braille character.
[bottom] :: Braille6 a -> Row a

-- | A datastructure to render Braille patterns with eight dots cells.
data Braille a
Braille :: Row a -> Row a -> Row a -> Row a -> Braille a

-- | The state of the top row of the Braille character.
[row1] :: Braille a -> Row a

-- | The state of the second row of the Braille character.
[row2] :: Braille a -> Row a

-- | The state of the third row of the Braille character.
[row3] :: Braille a -> Row a

-- | The state of the bottom row of the Braille character.
[row4] :: Braille a -> Row a

-- | Convert a <a>Braille6</a> value to a <a>Braille</a> character, by
--   putting in a given value at the two values at the bottom row.
toBraille' :: a -> Braille6 a -> Braille a

-- | Convert a <a>Braille6</a> value to a <a>Braille6</a> character by
--   setting the bottom row with two <a>False</a> values.
toBraille :: Braille6 Bool -> Braille Bool

-- | Convert the given <a>Braille6</a> value to a unicode character
--   representing this Braille value.
braille6 :: Braille6 Bool -> Char

-- | Convert the given <a>Braille</a> value to a unicode character
--   representing this braille value.
braille :: Braille Bool -> Char
instance Data.Traversable.Traversable Data.Char.Braille.Braille
instance GHC.Show.Show a => GHC.Show.Show (Data.Char.Braille.Braille a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Char.Braille.Braille a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Char.Braille.Braille a)
instance GHC.Base.Functor Data.Char.Braille.Braille
instance Data.Foldable.Foldable Data.Char.Braille.Braille
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Char.Braille.Braille a)
instance Data.Traversable.Traversable Data.Char.Braille.Braille6
instance GHC.Show.Show a => GHC.Show.Show (Data.Char.Braille.Braille6 a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Char.Braille.Braille6 a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Char.Braille.Braille6 a)
instance GHC.Base.Functor Data.Char.Braille.Braille6
instance Data.Foldable.Foldable Data.Char.Braille.Braille6
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Char.Braille.Braille6 a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Char.Braille.Braille a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Char.Braille.Braille6 a)


-- | The <a>1F0A0 code block</a> can be used to work with cards. This
--   module makes working with the three sets of cards more convenient. The
--   first set are cards with a suit (four suits) and a rank (14 ranks),
--   which allows us to generate 56 cards. Next there are three jokes with
--   the colors <i>red</i>, <i>black</i> and <i>white</i>. Finally there
--   are 21 trump cards and the fool card (a tarot card which normally has
--   no number).
--   
--   The module contains pattern synonyms that define common aliasses for
--   these cards.
module Data.Char.Card

-- | A data type for the card suits
data CardSuit

-- | The <i>spades</i> card suit.
Spades :: CardSuit

-- | The <i>hearts</i> card suit.
Hearts :: CardSuit

-- | The <i>diamonds</i> card suit.
Diamonds :: CardSuit

-- | The <i>clubs</i> card suit.
Clubs :: CardSuit

-- | A data type for the rank of the card.
data CardRank

-- | The <i>ace</i> card rank.
Ace :: CardRank

-- | Card rank 2.
R2 :: CardRank

-- | Card rank 3.
R3 :: CardRank

-- | Card rank 4.
R4 :: CardRank

-- | Card rank 5.
R5 :: CardRank

-- | Card rank 6.
R6 :: CardRank

-- | Card rank 7.
R7 :: CardRank

-- | Card rank 8.
R8 :: CardRank

-- | Card rank 9.
R9 :: CardRank

-- | Card rank 10.
R10 :: CardRank

-- | The <i>jack</i> card rank.
Jack :: CardRank

-- | The <i>knight</i> card rank.
Knight :: CardRank

-- | The <i>queen</i> card rank.
Queen :: CardRank

-- | The <i>king</i> card rank.
King :: CardRank

-- | A data type to represent the three colors for which there are jokers:
--   <i>red</i>, <i>black</i> and <i>white</i>.
data JokerColor

-- | The <i>red</i> joker.
Red :: JokerColor

-- | The <i>black</i> joker.
Black :: JokerColor

-- | The <i>white</i> joker.
White :: JokerColor

-- | A data type for the trump cards, often used for <i>tarot</i>.
data Trump

-- | The <i>fool</i> trump card, this tarot card is normally not numbered.
Fool :: Trump

-- | Tarot card <i>I</i>.
Trump1 :: Trump

-- | Tarot card <i>II</i>.
Trump2 :: Trump

-- | Tarot card <i>III</i>.
Trump3 :: Trump

-- | Tarot card <i>IV</i>.
Trump4 :: Trump

-- | Tarot card <i>V</i>.
Trump5 :: Trump

-- | Tarot card <i>VI</i>.
Trump6 :: Trump

-- | Tarot card <i>VII</i>.
Trump7 :: Trump

-- | Tarot card <i>VIII</i>.
Trump8 :: Trump

-- | Tarot card <i>IX</i>.
Trump9 :: Trump

-- | Tarot card <i>X</i>.
Trump10 :: Trump

-- | Tarot card <i>XI</i>.
Trump11 :: Trump

-- | Tarot card <i>XII</i>.
Trump12 :: Trump

-- | Tarot card <i>XIII</i>.
Trump13 :: Trump

-- | Tarot card <i>XIV</i>.
Trump14 :: Trump

-- | Tarot card <i>XV</i>.
Trump15 :: Trump

-- | Tarot card <i>XVI</i>.
Trump16 :: Trump

-- | Tarot card <i>XVII</i>.
Trump17 :: Trump

-- | Tarot card <i>XVIII</i>.
Trump18 :: Trump

-- | Tarot card <i>XIX</i>.
Trump19 :: Trump

-- | Tarot card <i>XX</i>.
Trump20 :: Trump

-- | Tarot card <i>XXI</i>.
Trump21 :: Trump

-- | A data type that represents the possible types of cards for which
--   there is a Unicode characters. This is the back of a card, a card with
--   a suit and rank, three <i>jokers</i>, and the 21 <i>trump</i> cards
--   and the <i>fool</i>.
data Card

-- | The back of the card.
Back :: Card

-- | A card that is a combination of a <a>CardSuit</a> and a
--   <a>CardRank</a>. There are 56 possibilities.
Card :: CardSuit -> CardRank -> Card

-- | Three possible <a>JokerColor</a> cards.
Joker :: JokerColor -> Card
Trump :: Trump -> Card

-- | The unicode character that represents the <i>back</i> of the card.
back :: Char

-- | Convert the given <a>Card</a> object to its unicode equivalent.
card :: Card -> Char

-- | Convert the given <a>CardSuit</a> and <a>CardRank</a> to the
--   equivalent unicode character for this card.
card' :: CardSuit -> CardRank -> Char

-- | Convert the given <a>JokerColor</a> to the unicode character which
--   represents this joker color.
joker :: JokerColor -> Char

-- | Convert the given 't:Trump' value to the unicode equivalent.
trump :: Trump -> Char

-- | <i>Swords</i> is an alias for the <i>spades</i> card suit.
pattern Swords :: CardSuit

-- | <i>Cups</i> is an alias for the <i>hearts</i> card suit.
pattern Cups :: CardSuit

-- | <i>Pentacles</i> is an alias for the <i>diamonds</i> card suit.
pattern Pentacles :: CardSuit

-- | <i>Wands</i> is an alias for the <i>clubs</i> card suit.
pattern Wands :: CardSuit

-- | In France, the <i>jack</i> is sometimes called the <i>valet</i>.
pattern Valet :: CardRank

-- | In Germany, Austria and Switzerland, the <i>jack</i> is sometimes
--   called the <i>bube</i>.
pattern Bube :: CardRank

-- | In Germany and Switzerland, the <i>jack</i> is sometimes called the
--   <i>unter</i>.
pattern Unter :: CardRank

-- | An alternative name for the <i>jack</i> is <i>page</i>.
pattern Page :: CardRank

-- | In Italy, the <i>jack</i> is sometimes called the <i>fante</i>.
pattern Fante :: CardRank

-- | In France, the <i>knight</i> is sometimes called the <i>chevalier</i>.
pattern Chevalier :: CardRank

-- | In Germany, the <i>knight</i> is sometimes called the <i>ober</i>.
pattern Ober :: CardRank

-- | In Germany, the <i>knight</i> is sometimes called the <i>ritter</i>.
pattern Ritter :: CardRank

-- | An alternative name for the <i>jack</i> is <i>cavall</i>.
pattern Cavall :: CardRank

-- | An alternative name for the <i>jack</i> is <i>cavaliere</i>.
pattern Cavaliere :: CardRank

-- | An alternative name for the <i>queen</i> is <i>dame</i>.
pattern Dame :: CardRank

-- | In Germany, the <i>queen</i> is sometimes called the <i>königin</i>.
pattern Königin :: CardRank

-- | In Italy, the <i>queen</i> is sometimes called the <i>regina</i>.
pattern Regina :: CardRank

-- | In France, the <i>king</i> is sometimes called the <i>roi</i>.
pattern Roi :: CardRank

-- | In Germany, the <i>king</i> is sometimes called the <i>könig</i>.
pattern König :: CardRank

-- | In Italy, the <i>queen</i> is sometimes called the <i>re</i>.
pattern Re :: CardRank

-- | The trump card with number <i>II</i> is named <i>childhood</i>.
pattern Childhood :: Trump

-- | The trump card with number <i>III</i> is named <i>youth</i>.
pattern Youth :: Trump

-- | The trump card with number <i>IV</i> is named <i>maturity</i>.
pattern Maturity :: Trump

-- | The trump card with number <i>V</i> is named <i>old age</i>.
pattern OldAge :: Trump

-- | The trump card with number <i>VI</i> is named <i>morning</i>.
pattern Morning :: Trump

-- | The trump card with number <i>VII</i> is named <i>afternoon</i>.
pattern Afternoon :: Trump

-- | The trump card with number <i>VIII</i> is named <i>evening</i>.
pattern Evening :: Trump

-- | The trump card with number <i>IX</i> is named <i>night</i>.
pattern Night :: Trump

-- | The trump card with number <i>X</i> is named <i>earth</i>.
pattern Earth :: Trump

-- | The trump card with number <i>X</i> is named <i>air</i>.
pattern Air :: Trump

-- | The trump card with number <i>XI</i> is named <i>water</i>.
pattern Water :: Trump

-- | The trump card with number <i>XI</i> is named <i>fire</i>.
pattern Fire :: Trump

-- | The trump card with number <i>XII</i> is named <i>dance</i>.
pattern Dance :: Trump

-- | The trump card with number <i>XIII</i> is named <i>shopping</i>.
pattern Shopping :: Trump

-- | The trump card with number <i>XIV</i> is named <i>open air</i>.
pattern OpenAir :: Trump

-- | The trump card with number <i>XV</i> is named <i>visual arts</i>.
pattern VisualArts :: Trump

-- | The trump card with number <i>XVI</i> is named <i>spring</i>.
pattern Spring :: Trump

-- | The trump card with number <i>XVII</i> is named <i>summer</i>.
pattern Summer :: Trump

-- | The trump card with number <i>XVIII</i> is named <i>autumn</i>.
pattern Autumn :: Trump

-- | The trump card with number <i>XIX</i> is named <i>winter</i>.
pattern Winter :: Trump

-- | The trump card with number <i>XX</i> is named the <i>game</i>.
pattern Game :: Trump

-- | The trump card with number <i>XXI</i> is named <i>collective</i>.
pattern Collective :: Trump

-- | The trump card with number <i>I</i> is named <i>individual</i>.
pattern Individual :: Trump
instance GHC.Show.Show Data.Char.Card.Card
instance GHC.Read.Read Data.Char.Card.Card
instance GHC.Classes.Ord Data.Char.Card.Card
instance GHC.Classes.Eq Data.Char.Card.Card
instance GHC.Show.Show Data.Char.Card.Trump
instance GHC.Read.Read Data.Char.Card.Trump
instance GHC.Classes.Ord Data.Char.Card.Trump
instance GHC.Classes.Eq Data.Char.Card.Trump
instance GHC.Enum.Enum Data.Char.Card.Trump
instance GHC.Enum.Bounded Data.Char.Card.Trump
instance GHC.Show.Show Data.Char.Card.JokerColor
instance GHC.Read.Read Data.Char.Card.JokerColor
instance GHC.Classes.Ord Data.Char.Card.JokerColor
instance GHC.Classes.Eq Data.Char.Card.JokerColor
instance GHC.Enum.Enum Data.Char.Card.JokerColor
instance GHC.Enum.Bounded Data.Char.Card.JokerColor
instance GHC.Show.Show Data.Char.Card.CardRank
instance GHC.Read.Read Data.Char.Card.CardRank
instance GHC.Classes.Ord Data.Char.Card.CardRank
instance GHC.Classes.Eq Data.Char.Card.CardRank
instance GHC.Enum.Enum Data.Char.Card.CardRank
instance GHC.Enum.Bounded Data.Char.Card.CardRank
instance GHC.Show.Show Data.Char.Card.CardSuit
instance GHC.Read.Read Data.Char.Card.CardSuit
instance GHC.Classes.Ord Data.Char.Card.CardSuit
instance GHC.Classes.Eq Data.Char.Card.CardSuit
instance GHC.Enum.Enum Data.Char.Card.CardSuit
instance GHC.Enum.Bounded Data.Char.Card.CardSuit
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Card.Card
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Card.Trump
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Card.JokerColor
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Card.CardRank
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Card.CardSuit


-- | One can make use of a <a>block 2600</a> and <a>block 1fa00</a> of
--   Unicode characters to render chess characters. One can render chess
--   characters as <i>netral</i>, <i>white</i>, or <i>black</i> pieces, for
--   such pieces one can render these rotated by 0, 90, 180 and 270
--   degrees. Knights can be rendered on 45, 135, 225 and 315 degrees as
--   well. Furthermore unicode allows to render an <i>equihopper</i>, and
--   special variants like a <i>knight-queen</i>, <i>knight-rook</i>, and
--   <i>knight-bishop</i>.
--   
--   The module contains pattern synonyms for names that are often given to
--   the pieces.
module Data.Char.Chess

-- | The color of a chess piece, this can for most pieces be <a>Black</a>,
--   <a>White</a>, or <a>Neutral</a>.
data ChessColor

-- | <i>White</i> color.
White :: ChessColor

-- | <i>Black</i> color.
Black :: ChessColor

-- | Neutral chess pieces, sometimes depicted half <i>white</i> and half
--   <i>black</i>.
Neutral :: ChessColor

-- | A data type that defined binary colors (<a>BWhite</a>, and
--   <a>BBlack</a>), this is used for special chess pieces like a <i>knight
--   queen</i>, <i>knight rook</i>, and <i>knight bishop</i> that only have
--   no neutral color in unicode.
data ChessColorBinary

-- | <i>White</i> color.
BWhite :: ChessColorBinary

-- | <i>Black</i> color.
BBlack :: ChessColorBinary

-- | The type of chess pieces. Unicode includes an <a>Equihopper</a> as
--   piece as well.
data ChessPieceType

-- | The <i>king</i> chess piece.
King :: ChessPieceType

-- | The <i>queen</i> chess piece.
Queen :: ChessPieceType

-- | The <i>rook</i> chess piece.
Rook :: ChessPieceType

-- | The <i>bishop</i> chess piece.
Bishop :: ChessPieceType

-- | The <i>knight</i> chess piece.
Knight :: ChessPieceType

-- | The <i>pawn</i> chess piece.
Pawn :: ChessPieceType

-- | The <i>equihopper</i> chess piece.
Equihopper :: ChessPieceType

-- | Hybrid chess pieces like the <i>knight-queen</i>, <i>knight-rook</i>
--   and <i>knight-bishop</i>.
data ChessHybridType

-- | The <i>knight-queen</i> chess piece.
KnightQueen :: ChessHybridType

-- | The <i>knight-rook</i> chess piece.
KnightRook :: ChessHybridType

-- | The <i>knight-bishop</i> chess piece.
KnightBishop :: ChessHybridType

-- | Chess pieces that can be represented in Unicode. These are the
--   <i>king</i>, <i>queen</i>, <i>rook</i>, <i>bishop</i>, <i>knight</i>,
--   <i>pawn</i>, and <i>equihopper</i> over 0, 90, 180, and 270 degrees;
--   and the <i>knight</i> over <i>45</i>, <i>135</i>, <i>225</i>, and
--   <i>315</i> degrees in <a>Black</a>, <a>White</a> and <a>Neutral</a>.
--   Furthermore one can draw a <i>knight-queen</i>, <i>knight-rook</i>,
--   and <i>knight-bishop</i> pieces can be drawn without rotation and only
--   in <a>BBlack</a> or <a>BWhite</a>.
data ChessPiece

-- | Standard pieces drawn in <i>black</i>, <i>white</i>, or <i>neutral</i>
--   and with rotation.
Chess90 :: ChessColor -> ChessPieceType -> Rotate90 -> ChessPiece

-- | <i>Knights</i> have unicode characters to render these rotated over
--   <i>45</i>, <i>135</i>, <i>225</i> and <i>315</i> degrees.
Chess45Knight :: ChessColor -> Rotate45 -> ChessPiece

-- | Hybrid chess pieces can only be rendered in <a>BBlack</a> and
--   <a>BWhite</a>.
ChessHybrid :: ChessHybridType -> ChessColorBinary -> ChessPiece

-- | Possible rotations of the pieces. Most pieces can be rotated 0, 90,
--   180, and 270 degrees.
data Rotate90

-- | No rotation.
R0 :: Rotate90

-- | Rotation over <i>90</i> degrees.
R90 :: Rotate90

-- | Rotation over <i>180</i> degrees.
R180 :: Rotate90

-- | Rotation over <i>270</i> degrees.
R270 :: Rotate90

-- | Extra rotations that can be performed for knight chess pieces.
data Rotate45

-- | Rotation over <i>45</i> degrees.
R45 :: Rotate45

-- | Rotation over <i>135</i> degrees.
R135 :: Rotate45

-- | Rotation over <i>225</i> degrees.
R225 :: Rotate45

-- | Rotation over <i>315</i> degrees.
R315 :: Rotate45

-- | Convert the given <a>ChessPiece</a> to the corresponding unicode
--   character.
chessPiece :: ChessPiece -> Char

-- | A <i>grasshopper</i> is a <i>queen</i> rotated over 180 degrees.
pattern Grasshopper :: ChessColor -> ChessPiece

-- | A <i>Nightrider</i> is a <i>knight</i> rotated over 180 degrees.
pattern Nightrider :: ChessColor -> ChessPiece

-- | An <i>amazon</i> is alterative name for a <i>knight-queen</i>.
pattern Amazon :: ChessColorBinary -> ChessPiece

-- | A <i>terror</i> is alterative name for a <i>knight-queen</i>.
pattern Terror :: ChessColorBinary -> ChessPiece

-- | An <i>omnipotent queen</i> is alterative name for a
--   <i>knight-queen</i>.
pattern OmnipotentQueen :: ChessColorBinary -> ChessPiece

-- | A <i>superqueen</i> is alterative name for a <i>knight-queen</i>.
pattern Superqueen :: ChessColorBinary -> ChessPiece

-- | A <i>chancellor</i> is alterative name for a <i>knight-rook</i>.
pattern Chancellor :: ChessColorBinary -> ChessPiece

-- | A <i>marshall</i> is alterative name for a <i>knight-rook</i>.
pattern Marshall :: ChessColorBinary -> ChessPiece

-- | An <i>empress</i> is alterative name for a <i>knight-rook</i>.
pattern Empress :: ChessColorBinary -> ChessPiece

-- | A <i>cardinal</i> is alterative name for a <i>knight-bishop</i>.
pattern Cardinal :: ChessColorBinary -> ChessPiece

-- | A <i>princess</i> is alterative name for a <i>knight-bishop</i>.
pattern Princess :: ChessColorBinary -> ChessPiece
instance GHC.Show.Show Data.Char.Chess.ChessPiece
instance GHC.Read.Read Data.Char.Chess.ChessPiece
instance GHC.Classes.Ord Data.Char.Chess.ChessPiece
instance GHC.Classes.Eq Data.Char.Chess.ChessPiece
instance GHC.Show.Show Data.Char.Chess.ChessHybridType
instance GHC.Read.Read Data.Char.Chess.ChessHybridType
instance GHC.Classes.Ord Data.Char.Chess.ChessHybridType
instance GHC.Classes.Eq Data.Char.Chess.ChessHybridType
instance GHC.Enum.Enum Data.Char.Chess.ChessHybridType
instance GHC.Enum.Bounded Data.Char.Chess.ChessHybridType
instance GHC.Show.Show Data.Char.Chess.Rotate45
instance GHC.Read.Read Data.Char.Chess.Rotate45
instance GHC.Classes.Ord Data.Char.Chess.Rotate45
instance GHC.Classes.Eq Data.Char.Chess.Rotate45
instance GHC.Enum.Enum Data.Char.Chess.Rotate45
instance GHC.Enum.Bounded Data.Char.Chess.Rotate45
instance GHC.Show.Show Data.Char.Chess.Rotate90
instance GHC.Read.Read Data.Char.Chess.Rotate90
instance GHC.Classes.Ord Data.Char.Chess.Rotate90
instance GHC.Classes.Eq Data.Char.Chess.Rotate90
instance GHC.Enum.Enum Data.Char.Chess.Rotate90
instance GHC.Enum.Bounded Data.Char.Chess.Rotate90
instance GHC.Show.Show Data.Char.Chess.ChessPieceType
instance GHC.Read.Read Data.Char.Chess.ChessPieceType
instance GHC.Classes.Ord Data.Char.Chess.ChessPieceType
instance GHC.Classes.Eq Data.Char.Chess.ChessPieceType
instance GHC.Enum.Enum Data.Char.Chess.ChessPieceType
instance GHC.Enum.Bounded Data.Char.Chess.ChessPieceType
instance GHC.Show.Show Data.Char.Chess.ChessColor
instance GHC.Read.Read Data.Char.Chess.ChessColor
instance GHC.Classes.Ord Data.Char.Chess.ChessColor
instance GHC.Classes.Eq Data.Char.Chess.ChessColor
instance GHC.Enum.Enum Data.Char.Chess.ChessColor
instance GHC.Enum.Bounded Data.Char.Chess.ChessColor
instance GHC.Show.Show Data.Char.Chess.ChessColorBinary
instance GHC.Read.Read Data.Char.Chess.ChessColorBinary
instance GHC.Classes.Ord Data.Char.Chess.ChessColorBinary
instance GHC.Classes.Eq Data.Char.Chess.ChessColorBinary
instance GHC.Enum.Enum Data.Char.Chess.ChessColorBinary
instance GHC.Enum.Bounded Data.Char.Chess.ChessColorBinary
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Chess.ChessPiece
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Chess.ChessHybridType
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Chess.Rotate45
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Chess.Rotate90
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Chess.ChessPieceType
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Chess.ChessColor
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Chess.ChessColorBinary


-- | A frame is represented as a pair of horizontal and vertical lines.
--   These can be any items, but currently only booleans and weight objects
--   are covered to convert the item to a corresponding character.
module Data.Char.Frame

-- | The weights of the frame lines, these can be <a>Empty</a>,
--   <a>Light</a> or <a>Heavy</a>.
data Weight

-- | The frame does not contain such line.
Empty :: Weight

-- | The frame contains such line.
Light :: Weight

-- | The frame contains such line, in <i>boldface</i>.
Heavy :: Weight

-- | A data type that determines the state of the <i>horizontal</i> lines
--   of the frame (<a>left</a> and <a>right</a>).
data Horizontal a
Horizontal :: a -> a -> Horizontal a

-- | The state of the left line of the frame.
[left] :: Horizontal a -> a

-- | The state of the right line of the frame.
[right] :: Horizontal a -> a

-- | A data type that determines the state of the <i>vertical</i> lines of
--   the frame (<a>up</a> and <a>down</a>).
data Vertical a
Vertical :: a -> a -> Vertical a

-- | The state of the line in the up direction of the frame.
[up] :: Vertical a -> a

-- | The state of the line in the down direction of the frame.
[down] :: Vertical a -> a

-- | A data type that specifies the four lines that should (not) be drawn
--   for the frame.
data Parts a
Parts :: Vertical a -> Horizontal a -> Parts a

-- | A type synonym that makes it more convenient to work with a
--   <a>Parts</a> object that wraps <a>Bool</a>s. Usually <a>True</a> means
--   it should draw a line, and <a>False</a> that there is no line in that
--   direction.
type Simple = Parts Bool

-- | A type synonym that makes it more convenient to work with a
--   <a>Parts</a> object that wraps <a>Weight</a> objects. These specify
--   the weight .
type Weighted = Parts Weight

-- | A pattern that makes pattern matching and expressions with
--   <a>Parts</a> more convenient.
pattern Frame :: a -> a -> a -> a -> Parts a

-- | Convert a <a>Simple</a> frame to a corresponding <a>Char</a>. Here
--   <a>True</a> is mapped to a <a>Light</a> line.
simple :: Simple -> Char

-- | Convert a <a>Simple</a> frame to a corresponding <a>Char</a>. Here
--   <a>True</a> is mapped to a <a>Heavy</a> line.
simple' :: Simple -> Char

-- | Generate a <a>Char</a> where turns are done with an <i>arc</i> instead
--   of a corner. This can only be done for <a>Light</a> lines.
simpleWithArc :: Simple -> Char

-- | Converts a given <a>Weighted</a> to the char that can be used to
--   render frames.
weighted :: Weighted -> Char

-- | Convert a <a>Simple</a> frame to a <a>Weighted</a> frame by converting
--   <a>True</a> to the given <a>Weight</a> value.
simpleToWeighted :: Weight -> Simple -> Weighted

-- | Convert a <a>Simple</a> frame to a <a>Weighted</a> frame by converting
--   <a>True</a> to <a>Light</a>.
simpleToLight :: Simple -> Weighted

-- | Convert a <a>Simple</a> frame to a <a>Weighted</a> frame by converting
--   <a>True</a> to <a>Heavy</a>.
simpleToHeavy :: Simple -> Weighted
instance GHC.Show.Show Data.Char.Frame.Weight
instance GHC.Read.Read Data.Char.Frame.Weight
instance GHC.Classes.Ord Data.Char.Frame.Weight
instance GHC.Classes.Eq Data.Char.Frame.Weight
instance GHC.Enum.Enum Data.Char.Frame.Weight
instance GHC.Enum.Bounded Data.Char.Frame.Weight
instance Data.Traversable.Traversable Data.Char.Frame.Parts
instance GHC.Show.Show a => GHC.Show.Show (Data.Char.Frame.Parts a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Char.Frame.Parts a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Char.Frame.Parts a)
instance GHC.Base.Functor Data.Char.Frame.Parts
instance Data.Foldable.Foldable Data.Char.Frame.Parts
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Char.Frame.Parts a)
instance Data.Traversable.Traversable Data.Char.Frame.Vertical
instance GHC.Show.Show a => GHC.Show.Show (Data.Char.Frame.Vertical a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Char.Frame.Vertical a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Char.Frame.Vertical a)
instance GHC.Base.Functor Data.Char.Frame.Vertical
instance Data.Foldable.Foldable Data.Char.Frame.Vertical
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Char.Frame.Vertical a)
instance Data.Traversable.Traversable Data.Char.Frame.Horizontal
instance GHC.Show.Show a => GHC.Show.Show (Data.Char.Frame.Horizontal a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Char.Frame.Horizontal a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Char.Frame.Horizontal a)
instance GHC.Base.Functor Data.Char.Frame.Horizontal
instance Data.Foldable.Foldable Data.Char.Frame.Horizontal
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Char.Frame.Horizontal a)
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Char.Frame.Weight
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (Data.Char.Frame.Parts a)
instance GHC.Base.Monoid a => GHC.Base.Monoid (Data.Char.Frame.Parts a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Char.Frame.Parts a)
instance GHC.Base.Applicative Data.Char.Frame.Parts
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (Data.Char.Frame.Vertical a)
instance GHC.Base.Monoid a => GHC.Base.Monoid (Data.Char.Frame.Vertical a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Char.Frame.Vertical a)
instance GHC.Base.Applicative Data.Char.Frame.Vertical
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (Data.Char.Frame.Horizontal a)
instance GHC.Base.Monoid a => GHC.Base.Monoid (Data.Char.Frame.Horizontal a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Char.Frame.Horizontal a)
instance GHC.Base.Applicative Data.Char.Frame.Horizontal


-- | One can make use of a <a>block of Unicode characters</a> to
--   <i>emulate</i> subscript and superscript. Note that the subscript and
--   superscript will be aligned with the <i>baseline</i> and the <i>cap
--   line</i> respectively, and is thus not equivalent to
--   <tt><a>sub</a>...<a>/sub</a></tt> and
--   <tt><a>sup</a>...<a>/sup</a></tt> in HTML. Furthermore only a small
--   subset of characters is supported.
--   
--   This module allows one to map certain characters to their subscript
--   and superscript counterpart, and furthermore makes it more convenient
--   to transform a number (both positive and negative) to a <a>Text</a>
--   that specifies this number in subscript and superscript.
module Data.Char.Small

-- | Convert a set of characters to their subscript counterpart, given that
--   characters exists.
toSub :: Char -> Maybe Char

-- | Convert a set of characters to their superscript counterpart, given
--   that characters exists.
toSup :: Char -> Maybe Char

-- | Convert a number (positive or negative) to a <a>Text</a> that
--   specifies that number in subscript characters.
asSub :: Integral i => i -> Text

-- | Convert a number (positive or negative) to a <a>Text</a> that
--   specifies that number in superscript characters.
asSup :: Integral i => i -> Text

-- | Format a given <a>Ratio</a> object to a <a>Text</a> value that formats
--   the ratio with superscript and subscript.
ratioToUnicode :: Integral i => Ratio i -> Text
